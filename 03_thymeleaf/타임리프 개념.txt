* Thymeleaf
1. View Template Engine
2. 서버에서 클라이언트에게 응답할 브라우저 화면을 만드는 역할을 수행한다.
3. 기존 HTML 코드와 구조를 그대로 사용하는 Natural Templates 방식을 사용한다.


* Spring Boot와 Thymeleaf
1. 스프링 부트가 채택한 표준 View Template Engine
2. Thymeleaf 디펜던시만 추가하면 바로 사용할 수 있다.


* th 속성 사용을 위한 네임스페이스 추가
- th 속성 사용 시, 앞에 th:를 붙여야 함
<html xmlns:th="http://www.thymeleaf.org">


* 타임리프 주석
1. <!--/* */-->
2. 브라우저 화면에서는 확인 불가


* 타임리프 주요 표현식
1. Link URL Expression
   1) 경로 작성 시 사용
   2) 형식 : @{}
   3) 활용 예시
    ① <img th:src="@{/경로}">
    ② <a th:href="@{/경로}">
    ③ <form th:action="@{/경로}">

2. Value Expression
   1) 값을 나타날 때 사용
   2) 형식 : ${}
   3) 영역 구분
    ① 세션에 저장된 값 : ${session.값}
    ② 애플리케이션에 저장된 값 : ${application.값}
   4) th 속성
    ① th:text="${텍스트}"
    ② th:utext="${HTML요소}"

3. Selection Variable Expression
   1) 객체와 필드를 구분해서 작성할 때 사용
   2) 형식
      <form th:object="${객체}">
       <input th:field="*{필드}">
       <textarea th:text="*{필드}">
      </form>      

4. Fragment Expression
  1) 조각 만들기
    ① <태그 th:fragment="조각명"></태그>
    ② <태그 th:fragment="조각명(매개변수)"></태그>
  2) 조각으로 바꾸기
    ① <태그 th:replace="~{파일명::조각명}"></태그>
    ② <태그 th:replace="~{파일명::조각명(인자)}"></태그>
  3) 조각을 넣기
    ① <태그 th:insert="~{파일명::조각명}"></태그>
    ② <태그 th:insert="~{파일명::조각명(인자)}"></태그>
      
      
* 타임리프 주요 제어문
1. 분기문
  1) if
  2) 형식
    ① <태그 th:if="${조건식}"></태그>
    ② <th:block th:if="${조건식}"></th:block>
  3) else
  4) 형식
    ① <태그 th:unless="${조건식}"></태그>
    ② <th:block th:if="${조건식}"></th:block>

2. 반복문
  1) 배열 또는 리스트를 순회할 수 있다.
  2) 형식
   ① <태그 th:each="변수:${배열/리스트}">
          ${변수}
       </태그>
   ② <태그 th:each="변수, rowStat:${배열/리스트}">
          ${변수}, ${rowStat.index}, ${rowStat.count}
       </태그>


* 타임리프 주요 유틸리티 객체
1. #lists
  1) 리스트를 의미
  2) 주요 사용법
    ① ${#lists.size(list)}                  : 요소의 개수 반환
    ② ${#lists.isEmpty(list)}             : 요소가 없으면 true 반환
    ③ ${#lists.contains(list, element)} : element 가 있으면 true 반환

2. #arrays
  1) 배열을 의미
  2) 주요 사용법
    ① ${#arrays.length(array)}               : 요소의 개수 반환
    ② ${#arrays.isEmpty(array)}             : 요소가 없으면 true 반환
    ③ ${#arrays.contains(array, element)} : element 가 있으면 true 반환

3. #dates
  1) java.util.Date 를 의미
  2) 관련 타입을 가진 데이터의 형식을 변환할 수 있음
  3) 원하는 단위의 값을 추출할 수 있음
  4) 주요 사용법
    ① ${#dates.format(date, 'pattern')} : pattern 지정된 date 반환
    ② ${#dates.year(date)}                : 년도 반환
    ③ ${#dates.month(date)}             : 월 반환(1~12)
    ④ ${#dates.day(date)}                 : 일 반환(1~31)
    ⑤ ${#dates.hour(date)}               : 시 반환(0~23)
    ⑥ ${#dates.minute(date)}            : 분 반환(0~59)
    ⑦ ${#dates.second(date)}            : 초 반환(0~59)

4. #strings
  1) java.lang.String 을 의미합니다.
  2) 주요 사용법
    (1) ${#strings.toString(obj)}               : obj를 문자열로 반환
    (2) ${#strings.isEmpty(text)}               : text가 빈 문자열 또는 null이면 true 반환
    (3) ${#strings.length(text)}}               : text의 길이 반환
    (4) ${#strings.defaultString(text,default)} : text가 빈 문자열 또는 null이면 default 반환
    (5) ${#strings.contains(text,substr)}       : text가 substr을 포함하면 true 반환
    (6) ${#strings.startsWith(text,substr)}     : text가 substr으로 시작하면 true 반환
    (7) ${#strings.endsWith(text,substr)}       : text가 substr으로 끝나면 true 반환
    (8) ${#strings.indexOf(text,substr)}        : text에 포함된 substr의 인덱스 반환 
    (9) ${#strings.substring(text,begin,end)}   : text의 인덱스 begin부터 end 이전까지 문자열 반환
   (10) ${#strings.replace(text,old,new)}       : text의 old를 new로 변경한 결과 반환
   (11) ${#strings.toUpperCase(text)}           : text를 모두 대문자로 변경한 결과 반환
   (12) ${#strings.toLowerCase(text)}           : text를 모두 소문자로 변경한 결과 반환
   (13) ${#strings.trim(text)}                  : text의 좌우 공백 제거 결과 반환
   (14) ${#strings.abbreviate(text,n)}          : text를 최대 n 만큼만 표시하고 ... 붙인 결과 반환
   (15) ${#strings.arrayJoin(array,text)}       : array의 각 요소 사이에 text를 넣어 연결한 문자열 반환

5. #numbers
  1) 숫자를 다룹니다.
  2) 주요 사용법
    (1) ${#numbers.formatInteger(num,n)}                   : 정수 num을 최소 n 자리로 표시. 부족한 자리는 0을 표시
    (2) ${#numbers.formatInteger(num,n,'COMMA')}           : 정수 num을 최소 n 자리로 표시. 천 단위 구분기호로 콤마(,) 사용
    (3) ${#numbers.formatDecimal(num,int,decimal)}         : 실수 num의 정수부를 최소 int 자리로 표시. 소수부를 최소 decimal 자리로 표시
    (4) ${#numbers.formatDecimal(num,int,decimal,'COMMA')} : 실수 num의 정수부를 최소 int 자리로 표시. 소수부를 최소 decimal 자리로 표시. 천 단위 구분기호로 콤마(,) 사용
    (5) ${#numbers.sequence(from,to)}                      : from ~ to 사이 모든 정수 값을 가지는 시퀀스(배열) 반환
    (6) ${#numbers.sequence(from,to,step)}                 : from ~ to 사이 step 간격의 정수 값을 가지는 시퀀스(배열) 반환