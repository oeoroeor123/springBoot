* JPQL (Java Persistence Query Language)
1. 엔티티(객체)를 중심으로 개발하기 위한 객체 지향 쿼리문
2. SQL 보다 간결하며 특정 DBMS에 의존하지 않음
3. find() 메소드를 통한 조회와 다르게 항상 데이터베이스에서 조회한다.
4. JPQL로 조회한 엔티티는 영속 컨텍스트에 저장된다.
5. SELECT, UPDATE, DELETE 문은 SQL문과 동일한 구문을 사용한다.
6. INSERT() 문은 persist() 메소드를 사용한다.
7. JPQL 구문은 대소문자를 구분하지 않는다. (단, 엔티티와 속성의 대소문자는 구분한다.)
8. JPQL은 반드시 엔티티의 별명(Alias)을 사용해야 한다. (별명 미사용 시 에러 발생)

* JPQL 작성 순서
1. JPQL 문자열을 작성한다. (SELECT 필드 FROM 엔티티)
2. 작성된 JPQL 문자열을 EntityManager의 createQuery() 메소드에 전달한다.
  1) TypedQuery : 반환할 타입을 명확하게 지정할 때 사용
  2) Query      : 반환할 타입을 명시하지 않고 사용, 반환 타입은 Object 또는 Object[]
3. 쿼리 객체 (TypedQuery, Query)가 제공하는 getSingleResult() 또는 getResultList() 메소드를 호출해서 쿼리를 실행한다.
  1) getSingleResult() : 결과 행이 1개일 때 사용, 결과가 없거나 2개 이상이면 예외 발생
  2) getResultList()    : 결과 행이 여러개일 때 사용, 결과가 없으면 비어 있는 컬렉션을 반환
  
* 프로젝션(Projection)
1. SELECT 절에서 조회할 대상을 지정하는 것을 의미
  형식 : SELECT { 프로젝션 대상 } FROM
2. 종류
  1) 엔티티 프로젝션 : 엔티티를 조회하는 방식, 조회된 엔티티는 영속 컨텍스트에 저장된다.
  2) 스칼라 타입 프로젝션 : 기본 데이터(숫자, 문자, 날짜 등)를 조회하는 방식, 조회된 스칼라 데이터는 영속 컨텍스트에 저장되지 않는다.
  3) 임베디드 타입 프로젝션 : @Embeddable 을 이용해 포함한 객체를 조회하는 방식, 조회된 임베디드 데이터는 영속 컨텍스트에 저장되지 않는다. 임베디드 타입은 FROM 절에서 사용할 수 없다.
  4) new 생성 프로젝션 : 다양한 값을 저장한 DTO 방식으로 조회하는 방식, new를 이용해 객체를 생성하기 때문에 영속 컨텍스트에 저장되지 않는다.
  
  